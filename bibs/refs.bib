@article{,
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - تشخیص برنامه های بسته بندی شده ی مجدد.pdf:pdf},
title = {تشخیص برنامه های بسته بندی شده ی مجدد}
}


@article{Khanmohammadi2019,
abstract = {The growing popularity of Android applications has generated increased concerns over the danger of piracy and the spread of malware, and particularly of adware: malware that seeks to present unwanted advertisements to the user. A popular way to distribute malware in the mobile world is through repackaging of legitimate apps. This process consists of downloading, unpacking, manipulating, recompiling an application, and publishing it again in an app store. In this paper, we conduct an empirical study of over 15,000 apps to gain insights into the factors that drive the spread of repackaged apps. We also examine the motivations of developers who publish repackaged apps and those of users who download them, as well as the factors that determine which apps are chosen for repackaging, and the ways in which the apps are modified during the repackaging process. Having observed that adware is particularly prevalent in repackaged apps, we focus on this type of malware and examine how the app is modified when it is injected in an app's code. Our findings shed much needed light on this class of malware that can be useful to security experts, and allow us to make recommendations that could lead to the creation of more effective malware detection tools, Furthermore, on the basis of our results, we propose a novel app indexing scheme that minimizes the number of comparisons needed to detect repackaged apps.},
author = {Khanmohammadi, Kobra and Ebrahimi, Neda and Hamou-Lhadj, Abdelwahab and Khoury, Rapha{\"{e}}l},
doi = {10.1007/s10664-019-09760-3},
file = {:home/mojtaba/Downloads/ESME-AppRepackaging.pdf:pdf},
issn = {15737616},
journal = {Empirical Software Engineering},
keywords = {Application repackaging,Mining android application repositories,Mobile applications,Mobile security},
number = {6},
pages = {3587--3629},
title = {{Empirical study of android repackaged applications}},
volume = {24},
year = {2019}
}



@article{Vidas2013,
abstract = {Application marketplaces are the main software distribution mechanism for modern mobile devices but are also emerging as a viable alternative to brick-and-mortar stores for personal computers. While most application marketplaces require applications to be cryptographically signed by their developers, in Android marketplaces, self-signed certificates are common, thereby offering very limited authentication properties. As a result, there have been reports of malware being distributed through application "repackaging." We provide a quantitative assessment of this phenomenon by collecting 41,057 applications from 194 alternative Android application markets in October 2011, in addition to a sample of 35,423 applications from the official Android market, Google Play. We observe that certain alternative markets almost exclusively distribute repackaged applications containing malware. To remedy this situation we propose a simple verification protocol, and discuss a proofof- concept implementation, AppIntegrity. AppIntegrity strengthens the authentication properties offered in application marketplaces, thereby making it more difficult for miscreants to repackage apps, while presenting very little computational or communication overhead, and being deployable without requiring significant changes to the Android platform. Copyright 2013 ACM.},
author = {Vidas, Timothy and Christin, Nicolas},
doi = {10.1145/2435349.2435378},
file = {:home/mojtaba/work/papers/a582390.pdf:pdf},
isbn = {9781450318907},
journal = {CODASPY 2013 - Proceedings of the 3rd ACM Conference on Data and Application Security and Privacy},
keywords = {Android,Malware,Repackaging,Smartphones,Software marketplace},
pages = {197--207},
title = {{Sweetening android lemon markets: Measuring and combating malware in application marketplaces}},
volume = {2011},
year = {2013}
}




@article{wu2012,
abstract = {Recently, the threat of Android malware is spreading rapidly, especially those repackaged Android malware. Although understanding Android malware using dynamic analysis can provide a comprehensive view, it is still subjected to high cost in environment deployment and manual efforts in investigation. In this study, we propose a static feature-based mechanism to provide a static analyst paradigm for detecting the Android malware. The mechanism considers the static information including permissions, deployment of components, Intent messages passing and API calls for characterizing the Android applications behavior. In order to recognize different intentions of Android malware, different kinds of clustering algorithms can be applied to enhance the malware modeling capability. Besides, we leverage the proposed mechanism and develop a system, called Droid Mat. First, the Droid Mat extracts the information (e.g., requested permissions, Intent messages passing, etc) from each application's manifest file, and regards components (Activity, Service, Receiver) as entry points drilling down for tracing API Calls related to permissions. Next, it applies K-means algorithm that enhances the malware modeling capability. The number of clusters are decided by Singular Value Decomposition (SVD) method on the low rank approximation. Finally, it uses kNN algorithm to classify the application as benign or malicious. The experiment result shows that the recall rate of our approach is better than one of well-known tool, Androguard, published in Black hat 2011, which focuses on Android malware analysis. In addition, Droid Mat is efficient since it takes only half of time than Androguard to predict 1738 apps as benign apps or Android malware. {\textcopyright} 2012 IEEE.},
author = {Wu, Dong Jie and Mao, Ching Hao and Wei, Te En and Lee, Hahn Ming and Wu, Kuo Ping},
doi = {10.1109/AsiaJCIS.2012.18},
file = {:home/mojtaba/work/papers/asiajcis.2012.18.pdf:pdf},
isbn = {9780769547763},
journal = {Proceedings of the 2012 7th Asia Joint Conference on Information Security, AsiaJCIS 2012},
keywords = {Android malware,Smartphone security,anomaly detection,feature-based,static analysis},
pages = {62--69},
title = {{DroidMat: Android malware detection through manifest and API calls tracing}},
year = {2012}
}


@article{Adhianto2010,
abstract = {HPCTOOLKIT is an integrated suite of tools that supports measurement, analysis, attribution, and presentation of application performance for both sequential and parallel programs. HPCTOOLKIT can pinpoint and quantify scalability bottlenecks in fully optimized parallel programs with a measurement overhead of only a few percent. Recently, new capabilities were added to HPCTOOLKIT for collecting call path profiles for fully optimized codes without any compiler support, pinpointing and quantifying bottlenecks in multithreaded programs, exploring performance information and source code using a new user interface, and displaying hierarchical space-time diagrams based on traces of asynchronous call path samples. This paper provides an overview of HPCTOOLKIT and illustrates its utility for performance analysis of parallel applications. Copyright {\textcopyright} 2009 John Wiley & Sons, Ltd.},
author = {Adhianto, L. and Banerjee, S. and Fagan, M. and Krentel, M. and Marin, G. and Mellor-Crummey, J. and Tallent, N. R.},
doi = {10.1002/cpe},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Adhianto et al. - 2010 - HPCTOOLKIT Tools for performance analysis of optimized parallel programs.pdf:pdf},
issn = {15320634},
journal = {Concurrency and Computation: Practice and Experience},
keywords = {Binary analysis,Call path profiling,Execution monitoring,Performance tools,Tracing},
number = {6},
pages = {685--701},
title = {{HPCTOOLKIT: Tools for performance analysis of optimized parallel programs}},
volume = {22},
year = {2010}
}
@article{Al-Anazi2016,
abstract = {Text clustering is an important application of data mining. It is concerned with grouping similar text documents together. In this paper, several models are built to cluster capstone project documents using three clustering techniques: k-means, k-means fast, and k-medoids. Our datatset is obtained from the library of the College of Computer and Information Sciences, King Saud University, Riyadh. Three similarity measure are tested: cosine similarity, Jaccard similarity, and Correlation Coefficient. The quality of the obtained models is evaluated and compared. The results indicate that the best performance is achieved using k-means and k-medoids combined with cosine similarity. We observe variation in the quality of clustering based on the evaluation measure used. In addition, as the value of k increases, the quality of the resulting cluster improves. Finally, we reveal the categories of graduation projects offered in the Information Technology department for female students.},
author = {Al-Anazi, Sumayia and Almahmoud, Hind and Al-Turaiki, Isra},
doi = {10.1016/j.procs.2016.04.005},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Al-Anazi, Almahmoud, Al-Turaiki - 2016 - Finding Similar Documents Using Different Clustering Techniques.pdf:pdf},
issn = {18770509},
journal = {Procedia Computer Science},
keywords = {clustering,cosine similarity,data mining,k-means,k-medoids,text mining},
number = {March},
pages = {28--34},
publisher = {Elsevier Masson SAS},
title = {{Finding Similar Documents Using Different Clustering Techniques}},
url = {http://dx.doi.org/10.1016/j.procs.2016.04.005},
volume = {82},
year = {2016}
}
@article{Alswaina2020,
abstract = {Android receives major attention from security practitioners and researchers due to the influx number of malicious applications. For the past twelve years, Android malicious applications have been grouped into families. In the research community, detecting new malware families is a challenge. As we investigate, most of the literature reviews focus on surveying malware detection. Characterizing the malware families can improve the detection process and understand the malware patterns. For this reason, we conduct a comprehensive survey on the state-of-the-art Android malware familial detection, identification, and categorization techniques. We categorize the literature based on three dimensions: type of analysis, features, and methodologies and techniques. Furthermore, we report the datasets that are commonly used. Finally, we highlight the limitations that we identify in the literature, challenges, and future research directions regarding the Android malware family.},
author = {Alswaina, Fahad and Elleithy, Khaled},
doi = {10.3390/electronics9060942},
file = {:home/mojtaba/Desktop/alswaina2020.pdf:pdf},
issn = {20799292},
journal = {Electronics (Switzerland)},
keywords = {Android application,Android malware family,Android security,Classification,Machine learning,Malicious application,Smartphone},
number = {6},
pages = {1--20},
title = {{Android malware family classification and analysis: Current status and future directions}},
volume = {9},
year = {2020}
}
@article{Chen2011,
author = {Chen, Wen-yen and Song, Yangqiu and Bai, Hongjie and Lin, Chih-jen and Chang, Edward Y and Member, Senior},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Chen et al. - 2011 - in Distributed Systems.pdf:pdf},
number = {3},
pages = {568--586},
publisher = {IEEE},
title = {{in Distributed Systems}},
volume = {33},
year = {2011}
}
@article{Chen2020,
abstract = {Machine learning-based solutions have been successfully employed for the automatic detection of malware on Android. However, machine learning models lack robustness to adversarial examples, which are crafted by adding carefully chosen perturbations to the normal inputs. So far, the adversarial examples can only deceive detectors that rely on syntactic features (e.g., requested permissions, API calls, etc.), and the perturbations can only be implemented by simply modifying application's manifest. While recent Android malware detectors rely more on semantic features from Dalvik bytecode rather than manifest, existing attacking/defending methods are no longer effective. In this paper, we introduce a new attacking method that generates adversarial examples of Android malware and evades being detected by the current models. To this end, we propose a method of applying optimal perturbations onto Android APK that can successfully deceive the machine learning detectors. We develop an automated tool to generate the adversarial examples without human intervention. In contrast to existing works, the adversarial examples crafted by our method can also deceive recent machine learning-based detectors that rely on semantic features such as control-flow-graph. The perturbations can also be implemented directly onto APK's Dalvik bytecode rather than Android manifest to evade from recent detectors. We demonstrate our attack on two state-of-the-art Android malware detection schemes, MaMaDroid and Drebin. Our results show that the malware detection rates decreased from 96% to 0% in MaMaDroid, and from 97% to 0% in Drebin, with just a small number of codes to be inserted into the APK.},
archivePrefix = {arXiv},
arxivId = {1808.04218},
author = {Chen, Xiao and Li, Chaoran and Wang, Derui and Wen, Sheng and Zhang, Jun and Nepal, Surya and Xiang, Yang and Ren, Kui},
doi = {10.1109/TIFS.2019.2932228},
eprint = {1808.04218},
file = {:home/mojtaba/Desktop/10.1109@TIFS.2019.2932228.pdf:pdf},
issn = {15566021},
journal = {IEEE Transactions on Information Forensics and Security},
keywords = {Android malware detection,adversarial machine learning},
number = {8},
pages = {987--1001},
title = {{Android HIV: A Study of Repackaging Malware for Evading Machine-Learning Detection}},
volume = {15},
year = {2020}
}



@article{Crussell2012,
abstract = {We present DNADroid, a tool that detects Android application copying, or "cloning", by robustly computing the similarity between two applications. DNADroid achieves this by comparing program dependency graphs between methods in candidate applications. Using DNADroid, we found at least 141 applications that have been the victims of cloning, some as many as seven times. DNADroid has a very low false positive rate - we manually confirmed that all the applications detected are indeed clones by either visual or behavioral similarity. We present several case studies that give insight into why applications are cloned, including localization and redirecting ad revenue. We describe a case of malware being added to an application and show how DNADroid was able to detect two variants of the same malware. Lastly, we offer examples of an open source cracking tool being used in the wild. {\textcopyright} 2012 Springer-Verlag.},
author = {Crussell, Jonathan and Gibler, Clint and Chen, Hao},
doi = {10.1007/978-3-642-33167-1_3},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Crussell, Gibler, Chen - 2012 - Attack of the clones Detecting cloned applications on Android markets.pdf:pdf},
isbn = {9783642331664},
issn = {03029743},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
pages = {37--54},
title = {{Attack of the clones: Detecting cloned applications on Android markets}},
volume = {7459 LNCS},
year = {2012}
}





@book{Dong2018,
abstract = {Program code is a valuable asset to its owner. Due to the easy-to-reverse nature of Java, code protection for Android apps is of particular importance. To this end, code obfuscation is widely utilized by both legitimate app developers and malware authors, which complicates the representation of source code or machine code in order to hinder the manual investigation and code analysis. Despite many previous studies focusing on the obfuscation techniques, however, our knowledge of how obfuscation is applied by real-world developers is still limited. In this paper, we seek to better understand Android obfuscation and depict a holistic view of the usage of obfuscation through a large-scale investigation in the wild. In particular, we focus on three popular obfuscation approaches: identifier renaming, string encryption and Java reflection. To obtain the meaningful statistical results, we designed efficient and lightweight detection models for each obfuscation technique and applied them to our massive APK datasets (collected from Google Play, multiple third-party markets, and malware databases). We have learned several interesting facts from the result. For example, more apps on third-party markets than malware use identifier renaming, and malware authors use string encryption more frequently. We are also interested in the explanation of each finding. Therefore we carry out in-depth code analysis on some Android apps after sampling. We believe our study will help developers select the most suitable obfuscation approach, and in the meantime help researchers improve code analysis systems in the right direction.},
archivePrefix = {arXiv},
arxivId = {1801.01633},
author = {Dong, Shuaike and Li, Menghao and Diao, Wenrui and Liu, Xiangyu and Liu, Jian and Li, Zhou and Xu, Fenghao and Chen, Kai and Wang, Xiao Feng and Zhang, Kehuan},
booktitle = {Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST},
doi = {10.1007/978-3-030-01701-9_10},
eprint = {1801.01633},
file = {:home/mojtaba/Desktop/dong2018.pdf:pdf},
isbn = {9783030017002},
issn = {18678211},
keywords = {Android,Code protection,Obfuscation,Static analysis},
pages = {172--192},
publisher = {Springer International Publishing},
title = {{Understanding android obfuscation techniques: A large-scale investigation in the wild}},
url = {http://dx.doi.org/10.1007/978-3-030-01701-9_10},
volume = {254},
year = {2018}
}
@article{Gonzalez2015,
abstract = {The appearance of the Android platform and its popularity has resulted in a sharp rise in the number of reported vulnerabilities and consequently in the number of mobile threats. Leveraging openness of Android app markets and the lack of security testing, malware authors commonly plagiarize Android applications (e.g., through code reuse and repackaging) boosting the amount of malware on the markets and consequently the infection rate. In this paper, we present DroidKin, a robust approach for the detection of Android apps similarity. Based on a set of characteristics derived from binary and meta data accompanying it, DroidKin is able to detect similarity among applications under various levels of obfuscation. Droid-Kin performs analysis pinpointing similarities between applications and identifying their relationships. We validated our approach on a set of manually prepared Android applications and evaluated it with datasets made available by three recent studies: The Android Malware Genome project, Drebin, DroidAnalytics. This data sets showed that several relations exists between the samples. Finally, we performed a large-scale study of over 8,000 Android applications from Google play and Virus Total service.},
author = {Gonzalez, Hugo and Stakhanova, Natalia and Ghorbani, Ali A.},
doi = {10.1007/978-3-319-23829-6_30},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Gonzalez, Stakhanova, Ghorbani - 2015 - Droidkin Lightweight detection of android apps similarity.pdf:pdf},
isbn = {9783319238296},
issn = {18678211},
journal = {Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST},
keywords = {Android,Malware,Similarity},
number = {January 2015},
pages = {436--453},
title = {{Droidkin: Lightweight detection of android apps similarity}},
volume = {152},
year = {2015}
}
@article{Kamesh2012,
abstract = {To protect user privacy and data security in cloud computing, a secure k-nearest neighbor computation-enhanced scheme on encrypted database has been proposed by Wong, Cheung, Kao and Mamoulis. The scheme is proven resistant to the known-plaintext attack. We show that contrary to claims, the enhanced asymmetric scalar-product-preserving encryption cannot resist known-plaintext attack by directly solving a secret key from a set of known plaintext–ciphertext pairs.},
archivePrefix = {arXiv},
arxivId = {0806.0557},
author = {Kamesh and {Sakthi Priya}, N.},
doi = {10.1002/sec},
eprint = {0806.0557},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kamesh, Sakthi Priya - 2012 - A survey of cyber crimes Yanping.pdf:pdf},
isbn = {1111010110111},
issn = {09739769},
journal = {Security and Communication Networks},
keywords = {Authentication,Privacy,Protocol design and analysis,RFID,Security},
number = {June},
pages = {422--437},
title = {{A survey of cyber crimes Yanping}},
volume = {5},
year = {2012}
}
@article{Kim2016,
abstract = {This paper addresses the problem of detecting plagiarized mobile apps. Plagiarism is the practice of building mobile apps by reusing code from other apps without the consent of the corresponding app developers. Recent studies on third-party app markets have suggested that plagiarized apps are an important vehicle for malware delivery on mobile phones. Malware authors repackage official versions of apps with malicious functionality, and distribute them for free via these third-party app markets. An effective technique to detect app plagiarism can therefore help identify malicious apps. Code plagiarism has long been a problem and a number of code similarity detectors have been developed over the years to detect plagiarism. In this paper we show that obfuscation techniques can be used to easily defeat similarity detectors that rely solely on statically scanning the code of an app. We propose a dynamic technique to detect plagiarized apps that works by observing the interaction of an app with the underlying mobile platform via its API invocations. We propose API birthmarks to characterize unique app behaviors, and develop a robust plagiarism detection tool using API birthmarks.},
author = {Kim, Daeyoung and Gokhale, Amruta and Ganapathy, Vinod and Srivastava, Abhinav},
doi = {10.1007/s10515-015-0182-6},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kim et al. - 2016 - Detecting plagiarized mobile apps using API birthmarks.pdf:pdf},
issn = {15737535},
journal = {Automated Software Engineering},
keywords = {API birthmarks,Mobile apps,Plagiarism},
number = {4},
pages = {591--618},
publisher = {Springer US},
title = {{Detecting plagiarized mobile apps using API birthmarks}},
volume = {23},
year = {2016}
}
@article{Kim2019,
author = {Kim, Yeongcheol and Choi, Seokwoo and Cho, Eun-sun},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kim, Choi, Cho - 2019 - Measuring Similarity of Binary Programs using Hungarian Algorithm.pdf:pdf},
journal = {Ndss},
title = {{Measuring Similarity of Binary Programs using Hungarian Algorithm}},
year = {2019}
}
@article{Li2021,
abstract = {Repackaging is a serious threat to the Android ecosystem as it deprives app developers of their benefits, contributes to spreading malware on users' devices, and increases the workload of market maintainers. In the space of six years, the research around this specific issue has produced 57 approaches which do not readily scale to millions of apps or are only evaluated on private datasets without, in general, tool support available to the community. Through a systematic literature review of the subject, we argue that the research is slowing down, where many state-of-the-art approaches have reported high-performance rates on closed datasets, which are unfortunately difficult to replicate and to compare against. In this work, we propose to reboot the research in repackaged app detection by providing a literature review that summarises the challenges and current solutions for detecting repackaged apps and by providing a large dataset that supports replications of existing solutions and implications of new research directions. We hope that these contributions will re-activate the direction of detecting repackaged apps and spark innovative approaches going beyond the current state-of-the-art.},
archivePrefix = {arXiv},
arxivId = {1811.08520},
author = {Li, Li and Bissyand{\'{e}}, Tegawend{\'{e}} F. and Klein, Jacques},
doi = {10.1109/TSE.2019.2901679},
eprint = {1811.08520},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Li, Bissyand{\'{e}}, Klein - 2021 - Rebooting Research on Detecting Repackaged Android Apps Literature Review and Benchmark.pdf:pdf},
issn = {19393520},
journal = {IEEE Transactions on Software Engineering},
keywords = {Android,benchmark,clone,literature review,repackaging},
number = {4},
pages = {676--693},
title = {{Rebooting Research on Detecting Repackaged Android Apps: Literature Review and Benchmark}},
volume = {47},
year = {2021}
}
@article{Lin2013,
abstract = {Android security has become highly desirable since adversaries can easily repackage malicious codes into various benign applications and spread these malicious repackaged applications (MRAs). Most MRA detection mechanisms on Android focus on detecting a specific family of MRAs or requiring the original benign application to compare with the malicious ones. This work proposes a new mechanism, SCSdroid (System Call Sequence Droid), which adopts the thread-grained system call sequences activated by applications. The concept is that even if MRAs can be camouflaged as benign applications, their malicious behavior would still appear in the system call sequences. SCSdroid extracts the truly malicious common subsequences from the system call sequences of MRAs belonging to the same family. Therefore, these extracted common subsequences can be used to identify any evaluated application without requiring the original benign application. Experimental results show that SCSdroid falsely detected only two applications among 100 evaluated benign applications, and falsely detected only one application among 49 evaluated malicious applications. As a result, SCSdroid achieved up to 95.97% detection accuracy, i.e., 143 correct detections among 149 applications. {\textcopyright} 2012 Elsevier B.V. All rights reserved.},
author = {Lin, Ying Dar and Lai, Yuan Cheng and Chen, Chien Hung and Tsai, Hao Chuan},
doi = {10.1016/j.cose.2013.08.010},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Lin et al. - 2013 - Identifying android malicious repackaged applications by thread-grained system call sequences.pdf:pdf},
issn = {01674048},
journal = {Computers and Security},
keywords = {Android,Dynamic analysis,Longest common substring,Malicious repackaged applications,System call},
number = {PART B},
pages = {340--350},
publisher = {Elsevier Ltd},
title = {{Identifying android malicious repackaged applications by thread-grained system call sequences}},
url = {http://dx.doi.org/10.1016/j.cose.2013.08.010},
volume = {39},
year = {2013}
}
@article{Moia2017,
abstract = {Digital forensics is a branch of Computer Science aiming at investigating and analyzing electronic devices in the search for crime evidence. There are several ways to perform this search. Known File Filter (KFF) is one of them, where a list of interest objects is used to reduce/separate data for analysis. Holding a database of hashes of such objects, the examiner performs lookups for matches against the target device. However, due to limitations over hash functions (inability to detect similar objects), newmethods have been designed, called approximate matching. This sort of function has interesting characteristics for KFF investigations but suffers mainly from high costs when dealing with huge data sets, as the search is usually done by brute force. To mitigate this problem, strategies have been developed to better perform lookups. In this paper, we present the state of the art of similarity digest search strategies, along with a detailed comparison involving several aspects, as time complexity, memory requirement, and search precision. Our results show that none of the approaches address at least these main aspects. Finally, we discuss future directions and present requirements for a new strategy aiming to fulfill current limitations.},
author = {Moia, Vitor Hugo Galhardo and Henriques, Marco Aur{\'{e}}lio Amaral},
doi = {10.1155/2017/1306802},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Moia, Henriques - 2017 - Similarity digest search A survey and comparative analysis of strategies to perform known file filtering using.pdf:pdf},
issn = {19390122},
journal = {Security and Communication Networks},
title = {{Similarity digest search: A survey and comparative analysis of strategies to perform known file filtering using approximate matching}},
volume = {2017},
year = {2017}
}
@article{Potharaju2012,
abstract = {In this paper, we show how an attacker can launch malware onto a large number of smartphone users by plagiarizing Android applications and by using elements of social engineering to increase infection rate. Our analysis of a dataset of 158,000 smartphone applications meta-information indicates that 29.4% of the applications are more likely to be plagiarized. We propose three detection schemes that rely on syntactic fingerprinting to detect plagiarized applications under different levels of obfuscation used by the attacker. Our analysis of 7,600 smartphone application binaries shows that our schemes detect all instances of plagiarism from a set of real-world malware incidents with 0.5% false positives and scale to millions of applications using only commodity servers. {\textcopyright} 2012 Springer-Verlag.},
author = {Potharaju, Rahul and Newell, Andrew and Nita-Rotaru, Cristina and Zhang, Xiangyu},
doi = {10.1007/978-3-642-28166-2_11},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Potharaju et al. - 2012 - Plagiarizing smartphone applications Attack strategies and defense techniques.pdf:pdf},
isbn = {9783642281655},
issn = {03029743},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
pages = {106--120},
title = {{Plagiarizing smartphone applications: Attack strategies and defense techniques}},
volume = {7159 LNCS},
year = {2012}
}
@article{Samra2019,
abstract = {Nowadays android is the most popular operating system. Android apps suffer from more and more malware attacks. So more and more research is done to get a reliable malware detection approaches. Android malware detection is mainly divided into dynamic approach and static approach. In this paper, we present a survey of the two major approaches of the static Android malware detection: the permission based Detection technique and the signature based detection technique. It is a comparative study, that should be helpful for researchers in this topic. Based on clear parameters the study illustrates the similarity and differences in addition to the accuracy in important published researches.},
author = {Samra, Aiman Ahmad Abu and Qunoo, Hasan N. and Al-Rubaie, Fatma and El-Talli, Haneen},
doi = {10.1109/PICECE.2019.8747224},
file = {:home/mojtaba/Desktop/10.1109@PICECE.2019.8747224.pdf:pdf},
isbn = {9781538662915},
journal = {IEEE 7th Palestinian International Conference on Electrical and Computer Engineering, PICECE 2019},
keywords = {Android,Malware detection,Permission based,Signature based},
pages = {1--6},
publisher = {IEEE},
title = {{A survey of static android malware detection techniques}},
year = {2019}
}
@article{Shao2014,
abstract = {Repackaged Android applications (or simply apps) are one of the major sources of mobile malware and also an important cause of severe revenue loss to app developers. Although a number of solutions have been proposed to detect repackaged apps, the majority of them heavily rely on code analysis, thus suffering from two limitations: (1) poor scalability due to the billion opcode problem; (2) unreliability to code obfuscation/app hardening techniques. In this paper, we explore an alternative approach that exploits core resources, which have close relationships with codes, to detect repackaged apps. More precisely, we define new features for characterizing apps, investigate two kinds of algorithms for searching similar apps, and propose a two-stage methodology to speed up the detection. We realize our approach in a system named ResDroid and conduct large scale evaluation on it. The results show that ResDroid can identify repackaged apps efficiently and effectively even if they are protected by obfuscation or hardening systems.},
author = {Shao, Yuru and Luo, Xiapu and Qian, Chenxiong and Zhu, Pengfei and Zhang, Lei},
doi = {10.1145/2664243.2664275},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Shao et al. - 2014 - Towards a scalable resource-driven approach for detecting repackaged android applications(7).pdf:pdf},
isbn = {9781450330053},
journal = {ACM International Conference Proceeding Series},
number = {December},
pages = {56--65},
title = {{Towards a scalable resource-driven approach for detecting repackaged android applications}},
volume = {2014-Decem},
year = {2014}
}
@article{Sun2016,
author = {Sun, Xin and Zhongyang, Yibing and Xin, Zhi and Mao, Bing and Xie, Li and Sun, Xin and Zhongyang, Yibing and Xin, Zhi and Mao, Bing and Xie, Li and Code, Detecting and Sun, Xin and Zhongyang, Yibing and Xin, Zhi and Mao, Bing and Xie, Li},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sun et al. - 2016 - Detecting Code Reuse in Android Applications Using Component-Based Control Flow Graph To cite this version HAL Id.pdf:pdf},
isbn = {9783642554155},
pages = {0--14},
title = {{Detecting Code Reuse in Android Applications Using Component-Based Control Flow Graph To cite this version : HAL Id : hal-01370361 Detecting Code Reuse in Android Applications Using Component-Based Control Flow Graph}},
year = {2016}
}
@article{Tian2016,
abstract = {During repackaging, malware writers statically inject malcode and modify the control flow to ensure its execution. Repackaged malware is difficult to detect by existing classification techniques, partly because of their behavioral similarities to benign apps. By exploring the app's internal different behaviors, we propose a new Android repackaged malware detection technique based on code heterogeneity analysis. Our solution strategically partitions the code structure of an app into multiple dependence-based regions (subsets of the code). Each region is independently classified on its behavioral features. We point out the security challenges and design choices for partitioning code structures at the class and method level graphs, and present a solution based on multiple dependence relations. We have performed experimental evaluation with over 7,542 Android apps. For repackaged malware, our partition-based detection reduces false negatives (i.e., missed detection) by 30-fold, when compared to the non-partition-based approach. Overall, our approach achieves a false negative rate of 0.35% and a false positive rate of 2.97%.},
author = {Tian, Ke and Yao, Danfeng and Ryder, Barbara G. and Tan, Gang},
doi = {10.1109/SPW.2016.33},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Tian et al. - 2016 - Analysis of Code Heterogeneity for High-Precision Classification of Repackaged Malware.pdf:pdf},
isbn = {9781509008247},
journal = {Proceedings - 2016 IEEE Symposium on Security and Privacy Workshops, SPW 2016},
keywords = {Android Security,Code Heterogeneity,Malware Detectioin,Partition},
pages = {262--271},
publisher = {IEEE},
title = {{Analysis of Code Heterogeneity for High-Precision Classification of Repackaged Malware}},
year = {2016}
}
@article{Tian2020,
abstract = {During repackaging, malware writers statically inject malcode and modify the control flow to ensure its execution. Repackaged malware is difficult to detect by existing classification techniques, partly because of their behavioral similarities to benign apps. By exploring the app's internal different behaviors, we propose a new Android repackaged malware detection technique based on code heterogeneity analysis. Our solution strategically partitions the code structure of an app into multiple dependence-based regions (subsets of the code). Each region is independently classified on its behavioral features. We point out the security challenges and design choices for partitioning code structures at the class and method level graphs, and present a solution based on multiple dependence relations. We have performed experimental evaluation with over 7,542 Android apps. For repackaged malware, our partition-based detection reduces false negatives (i.e., missed detection) by 30-fold, when compared to the non-partition-based approach. Overall, our approach achieves a false negative rate of 0.35 percent and a false positive rate of 2.97 percent.},
author = {Tian, Ke and Yao, Danfeng and Ryder, Barbara G. and Tan, Gang and Peng, Guojun},
doi = {10.1109/TDSC.2017.2745575},
file = {:home/mojtaba/Desktop/Repackaged-Malware-Android-IEEE-TDSC.pdf:pdf},
issn = {19410018},
journal = {IEEE Transactions on Dependable and Secure Computing},
keywords = {Android security,malware detection,repackaged malware},
number = {1},
pages = {64--77},
title = {{Detection of Repackaged Android Malware with Code-Heterogeneity Features}},
volume = {17},
year = {2020}
}
@article{Wang2018,
abstract = {Program analysis, both static and dynamic, is helpful in understanding and improving Android software. Many techniques have been developed for various purposes including test generation, bug detection, identification of third-party libraries, clone detection, and {\^{a}}€¦},
author = {Wang, Yan},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wang - 2018 - Obfuscation-Resilient Code Detection Analyses for Android Apps.pdf:pdf},
title = {{Obfuscation-Resilient Code Detection Analyses for Android Apps}},
url = {http://rave.ohiolink.edu/etdc/view?acc_num=osu1534337202264542},
year = {2018}
}
@article{Zhang2021,
abstract = {Android obfuscation techniques include not only classic code obfuscation techniques that were adapted to Android, but also obfuscation methods that target the Android platform specifically. This work examines the status-quo of Android obfuscation, obfuscation detection and deobfuscation. Specifically, it first summarizes obfuscation approaches that are commonly used by app developers for code optimization, to protect their software against code theft and code tampering but are also frequently misused by malware developers to circumvent anti-malware products. Secondly, the article focuses on obfuscation detection techniques and presents various available tools and current research. Thirdly, deobfuscation (which aims at reinstating the original state before obfuscation) is discussed followed by a brief discussion how this impacts forensic investigation. We conclude that although obfuscation is widely used in Android app development (benign and malicious), available tools and the practices on how to deal with obfuscation are not standardized, and so are inherently lacking from a forensic standpoint.},
author = {Zhang, Xiaolu and Breitinger, Frank and Luechinger, Engelbert and O'Shaughnessy, Stephen},
doi = {10.1016/j.fsidi.2021.301285},
file = {:home/mojtaba/Desktop/1-s2.0-S2666281721002031-main.pdf:pdf},
issn = {26662817},
journal = {Forensic Science International: Digital Investigation},
keywords = {android application forensic},
pages = {301285},
publisher = {Elsevier Ltd},
title = {{Android application forensics: A survey of obfuscation, obfuscation detection and deobfuscation techniques and their impact on investigations}},
url = {https://doi.org/10.1016/j.fsidi.2021.301285},
volume = {39},
year = {2021}
}
@article{Zhou2012,
abstract = {Recent years have witnessed incredible popularity and adoption of smartphones and mobile devices, which is accompanied by large amount and wide variety of feature-rich smartphone applications. These smartphone applications (or apps), typically organized in different application marketplaces, can be conveniently browsed by mobile users and then simply clicked to install on a variety of mobile devices. In practice, besides the official marketplaces from platform vendors (e.g., Google and Apple), a number of third-party alternative marketplaces have also been created to host thousands of apps (e.g., to meet regional or localization needs). To maintain and foster a hygienic smartphone app ecosystem, there is a need for each third-party marketplace to offer quality apps to mobile users. In this paper, we perform a systematic study on six popular Android-based third-party marketplaces. Among them, we find a common "in-the-wild" practice of repackaging legitimate apps (from the official Android Market) and distributing repackaged ones via third-party marketplaces. To better understand the extent of such practice, we implement an app similarity measurement system called DroidMOSS that applies a fuzzy hashing technique to effectively localize and detect the changes from app-repackaging behavior. The experiments with DroidMOSS show a worrisome fact that 5% to 13% of apps hosted on these studied marketplaces are repackaged. Further manual investigation indicates that these repackaged apps are mainly used to replace existing in-app advertisements or embed new ones to "steal" or re-route ad revenues. We also identify a few cases with planted backdoors or malicious payloads among repackaged apps. The results call for the need of a rigorous vetting process for better regulation of third-party smartphone application marketplaces.},
author = {Zhou, Wu and Zhou, Yajin and Jiang, Xuxian and Ning, Peng},
doi = {10.1145/2133601.2133640},
file = {:home/mojtaba/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Zhou et al. - 2012 - Detecting repackaged smartphone applications in third-party android marketplaces.pdf:pdf},
isbn = {9781450310918},
keywords = {privacy and security,repackag-,smartphones},
pages = {317},
title = {{Detecting repackaged smartphone applications in third-party android marketplaces}},
year = {2012}
}


@misc{statistaGlobalMobile,
	author = {},
	title = {{G}lobal mobile {O}{S} market share 2022 | {S}tatista --- statista.com},
	howpublished = {\url{https://www.statista.com/statistics/272698/global-market-share-held-by-mobile-operating-systems-since-2009/#:~:text=Android%20maintained%20its%20position%20as,the%20mobile%20operating%20system%20market.}},
	year = {},
	note = {[Accessed 02-Feb-2023]},
}


@misc{googlePlayProtect,
	author = {},
	title = {{P}lay {P}rotect  |  {G}oogle {D}evelopers --- developers.google.com},
	howpublished = {\url{https://developers.google.com/android/play-protect}},
	year = {},
	note = {[Accessed 02-Feb-2023]},
}


@misc{cylabDecompileModify,
	author = {},
	title = { {D}ecompile and modify an {A}ndroid application | cylab.be --- cylab.be},
	howpublished = {\url{https://cylab.be/blog/69/decompile-and-modify-an-android-application}},
	year = {},
	note = {[Accessed 02-Feb-2023]},
}


@INPROCEEDINGS{libradar,
  author={Ma, Ziang and Wang, Haoyu and Guo, Yao and Chen, Xiangqun},
  booktitle={2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)},
  title={LibRadar: Fast and Accurate Detection of Third-Party Libraries in Android Apps},
  year={2016},
  volume={},
  number={},
  pages={653-656},
  doi={}}


@misc{brightsecOWASPMobile,
	author = {Admir Dizdar},
	title = {{O}{W}{A}{S}{P} {M}obile {T}op 10 {V}ulnerabilities and {H}ow to {P}revent {T}hem --- brightsec.com},
	howpublished = {\url{https://brightsec.com/blog/owasp-mobile-top-10/}},
	year = {},
	note = {[Accessed 02-Feb-2023]},
}


@article{MANIRIHO20221,
title = {A study on malicious software behaviour analysis and detection techniques: Taxonomy, current trends and challenges},
journal = {Future Generation Computer Systems},
volume = {130},
pages = {1-18},
year = {2022},
issn = {0167-739X},
doi = {https://doi.org/10.1016/j.future.2021.11.030},
url = {https://www.sciencedirect.com/science/article/pii/S0167739X21004751},
author = {Pascal Maniriho and Abdun Naser Mahmood and Mohammad Jabed Morshed Chowdhury},
keywords = {Malware analysis, Malware behaviour analysis, Malware detection, Dynamic analysis, Memory analysis, Machine learning, Deep learning},
abstract = {There has been an increasing trend of malware release, which raises the alarm for security professionals worldwide. It is often challenging to stay on top of different types of malware and their detection techniques, which are essential, particularly for researchers and the security community. Analysing malware to get insights into what it intends to perform on the victim’s system is one of the crucial steps towards malware detection. Malware analysis can be performed through static analysis, code analysis, dynamic analysis, memory analysis and hybrid analysis techniques. The next step to malware analysis is the detection model’s design using malware’s extracted patterns from the analysis. Machine learning and deep learning methods have drawn attention to researchers, owing to their ability to implement sophisticated malware detection models that can deal with known and unknown malicious activities. Therefore, this survey presents a comprehensive study and analysis of current malware and detection techniques using the snowball approach. It presents a comprehensive study on malware analysis testbeds, dynamic malware analysis and memory analysis, the taxonomy of malware behaviour analysis tools, datasets repositories, feature selection, machine learning and deep learning techniques. Moreover, comparisons of behaviour-based malware detection techniques have been grouped by categories of machine learning and deep learning techniques. This study also looks at various performance evaluation metrics, current research challenges in this area and possible future direction of research.}
}

@misc{oracleTrailReflection,
	author = {},
	title = {Trail: The Reflection API The Javax; Tutorials --- docs.oracle.com},
	howpublished = {\url{https://docs.oracle.com/javase/tutorial/reflect/index.html}},
	year = {},
	note = {[Accessed 02-Feb-2023]},
}



@article{Rastogi2013,
abstract = {Mobile malware threats have recently become a real concern. In this paper, we evaluate the state-of-the-art commercial mobile antimalware products for Android and test how resistant they are against various common obfuscation techniques (even with known malware). Such an evaluation is important for not only measuring the available defense against mobile malware threats but also proposing effective, next-generation solutions. We developed DroidChameleon, a systematic framework with various transformation techniques, and used it for our study. Our results on ten popular commercial anti-malware applications for Android are worrisome: none of these tools is resistant against common malware transformation techniques. Moreover, the transformations are simple in most cases and anti-malware tools make little effort to provide transformation- resilient detection. Finally, in the light of our results, we propose possible remedies for improving the current state of malware detection on mobile devices. {\textcopyright} 2013 ACM.},
author = {Rastogi, Vaibhav and Chen, Yan and Jiang, Xuxian},
doi = {10.1145/2484313.2484355},
file = {:home/mojtaba/work/papers/rcj13b.pdf:pdf},
isbn = {9781450317672},
journal = {ASIA CCS 2013 - Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security},
keywords = {android,anti-malware,malware,mobile},
pages = {329--334},
title = {{DroidChameleon: Evaluating Android anti-malware against transformation attacks}},
year = {2013}
}


@article{ZHANG2021301285,
title = {Android application forensics: A survey of obfuscation, obfuscation detection and deobfuscation techniques and their impact on investigations},
journal = {Forensic Science International: Digital Investigation},
volume = {39},
pages = {301285},
year = {2021},
issn = {2666-2817},
doi = {https://doi.org/10.1016/j.fsidi.2021.301285},
url = {https://www.sciencedirect.com/science/article/pii/S2666281721002031},
author = {Xiaolu Zhang and Frank Breitinger and Engelbert Luechinger and Stephen O'Shaughnessy},
keywords = {Android application forensic, Obfuscation, Deobfuscation, Obfuscation detection, Literature review, Survey, Reverse engineering},
abstract = {Android obfuscation techniques include not only classic code obfuscation techniques that were adapted to Android, but also obfuscation methods that target the Android platform specifically. This work examines the status-quo of Android obfuscation, obfuscation detection and deobfuscation. Specifically, it first summarizes obfuscation approaches that are commonly used by app developers for code optimization, to protect their software against code theft and code tampering but are also frequently misused by malware developers to circumvent anti-malware products. Secondly, the article focuses on obfuscation detection techniques and presents various available tools and current research. Thirdly, deobfuscation (which aims at reinstating the original state before obfuscation) is discussed followed by a brief discussion how this impacts forensic investigation. We conclude that although obfuscation is widely used in Android app development (benign and malicious), available tools and the practices on how to deal with obfuscation are not standardized, and so are inherently lacking from a forensic standpoint.}
}

@misc{codedemonsAllatoriJava,
	author = {},
	title = {{A}llatori {J}ava {O}bfuscator --- codedemons.net},
	howpublished = {\url{http://www.codedemons.net/allatori.html}},
	year = {},
	note = {[Accessed 02-Feb-2023]},
}


@misc{guardsquareProGuardManual,
	author = {},
	title = {{P}ro{G}uard {M}anual: {H}ome | {G}uardsquare --- guardsquare.com},
	howpublished = {\url{https://www.guardsquare.com/manual/home}},
	year = {},
	note = {[Accessed 02-Feb-2023]},
}

@article{Ardito2020,
abstract = {Several techniques exist for mobile test automation, from script-based techniques to automated test generation based on GUI models. Most techniques fall short in being adopted extensively by practitioners because of the very costly definition (and maintenance) of test cases. We present a novel testing framework for Android apps that allows a developer to write effective test scripts without having to know the implementation details and the user interface of the app under test. The main goal of the framework is to generate adaptive tests that can be executed on a significant number of apps, or different releases of the same app, without manual editing of the tests. The frameworks consists of: (1) a Test Scripting Language, that allows the tester to write generic test scripts tailored to activity and app categories; (2) a State Graph Modeler, that creates a model of the app's GUI, identifying activities (i.e., screens) and widgets; (3) an app classifier that determines the type of application under test; (4) an activity classifier that determines the purpose of each screen; (5) a test adapter that executes test scripts that are compatible with the specific app and activity, automatically tailoring the test scripts to the classes of the app and the activities under test. We evaluated empirically the components of our testing framework. The classifiers were able to outperform available approaches in the literature. The developed testing frameworkwas able to correctly adapt high-level test cases to 28 out of 32 applications, and to reduce the LOCs of the test scripts of around 90%.We conclude that machine learning can be fruitfully applied to the creation of high-level, adaptive test cases for Android apps. Our framework is modular in nature and allows expansions through the addition of new commands to be executed on the classified apps and activities.},
author = {Ardito, Luca and Coppola, Riccardo and Leonardi, Simone and Morisio, Maurizio and Buy, Ugo},
doi = {10.1109/ACCESS.2020.3029735},
file = {:home/mojtaba/work/papers/Automated_Test_Selection_for_Android_Apps_Based_on_APK_and_Activity_Classification.pdf:pdf},
issn = {21693536},
journal = {IEEE Access},
pages = {187648--187670},
title = {{Automated Test Selection for Android Apps Based on APK and Activity Classification}},
volume = {8},
year = {2020}
}



@article{Bhatt2015,
abstract = {Smartphone have been widely used in recent years due to their functionality, thus they also become attack targets of malware. Android provides a permission category that requires each application to explicitly request permission before it can be installed to run. Permissions are silent work when it is given request by the user, means over privileged permissions action going towards malicious purpose. Reverse engineering process application is repacked with the malicious permissions. Android provides inter process communication to other application are able to leak user's location, data and identity. To protect from malicious application it is needed to have some control mechanism to analyze application from malicious activity. This paper focuses of various permission based malware analysis method to detect malwares in android application.},
author = {Bhatt, Mitul S. and Patel, Hinaxi and Kariya, Swati},
file = {:home/mojtaba/Downloads/ijcta2015060536.pdf:pdf},
journal = {Int.J.Computer Technology and Applications},
keywords = {- android security,and mobile malware detection,android malware detection,permission based analysis},
number = {5},
pages = {852--856},
title = {{A Survey Permission Based Mobile Malware Detection}},
volume = {6},
year = {2015}
}


@article{classifier,
author={Karankar, Nilima and Shukla, Pragya and Agrawal, Niyati},
booktitle={2017 7th International Conference on Communication Systems and Network Technologies (CSNT)},
title={Comparative study of various machine learning classifiers on medical data},
year={2017},
volume={},
number={},
pages={267-271},
doi={10.1109/CSNT.2017.8418550}
}


@article{7476661,
author={Li, Li and Bissyandé, Tegawendé F. and Klein, Jacques and Le Traon, Yves},
booktitle={2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
title={An Investigation into the Use of Common Libraries in Android Apps},
year={2016},
volume={1},
number={},
pages={403-414},
doi={10.1109/SANER.2016.52}
}

@article{2627395,
author = {Zhang, Fangfang and Huang, Heqing and Zhu, Sencun and Wu, Dinghao and Liu, Peng},
title = {ViewDroid: Towards Obfuscation-Resilient Mobile Application Repackaging Detection},
year = {2014},
isbn = {9781450329729},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2627393.2627395},
doi = {10.1145/2627393.2627395},
abstract = {In recent years, as mobile smart device sales grow quickly, the development of mobile applications (apps) keeps accelerating, so does mobile app repackaging. Attackers can easily repackage an app under their own names or embed advertisements to earn pecuniary profits. They can also modify a popular app by inserting malicious payloads into the original app and leverage its popularity to accelerate malware propagation. In this paper, we propose ViewDroid, a user interface based approach to mobile app repackaging detection. Android apps are user interaction intensive and event dominated, and the interactions between users and apps are performed through user interface, or views. This observation inspires the design of our new birthmark for Android apps, namely, feature view graph, which captures users' navigation behavior across app views. Our experimental results demonstrate that this birthmark can characterize Android apps from a higher level abstraction, making it resilient to code obfuscation. ViewDroid can detect repackaged apps at a large scale, both effectively and efficiently. Our experiments also show that the false positive and false negative rates of ViewDroid are both very low.},
booktitle = {Proceedings of the 2014 ACM Conference on Security and Privacy in Wireless &amp; Mobile Networks},
pages = {25–36},
numpages = {12},
keywords = {mobile application, repackaging, obfuscation resilient, user interface},
location = {Oxford, United Kingdom},
series = {WiSec '14}
}


@article{Nguyen2020,
abstract = {The last decade has shown a steady rate of Android device dominance in market share and the emergence of hundreds of thousands of apps available to the public. Because of the ease of reverse engineering Android applications, repackaged malicious apps that clone existing code have become a severe problem in the marketplace. This research proposes a novel repackaged detection system based on perceptual hashes of vetted Android apps and their associated dynamic user interface (UI) behavior. Results show that an average hash approach produces 88% accuracy (indicating low false negative and false positive rates) in a sample set of 4878 Android apps, including 2151 repackaged apps. The approach is the first dynamic method proposed in the research community using image-based hashing techniques with reasonable performance to other known dynamic approaches and the possibility for practical implementation at scale for new applications entering the Android market.},
author = {Nguyen, Thanh and McDonald, J. Todd and Glisson, William Bradley and Andel, Todd R.},
doi = {10.24251/hicss.2020.813},
file = {:home/mojtaba/work/Sharif/ThesisReport/Ms.c-Thesis-Report/figs/Detecting Repackaged Android Applications_OCR.pdf:pdf},
isbn = {9780998133133},
issn = {15301605},
journal = {Proceedings of the Annual Hawaii International Conference on System Sciences},
pages = {6641--6650},
title = {{Detecting repackaged android applications using perceptual hashing}},
volume = {2020-January},
year = {2020}
}


@article{Salem2015,
archivePrefix = {arXiv},
arxivId = {arXiv:1808.01186v1},
author = {Salem, Aleieldin},
eprint = {arXiv:1808.01186v1},
file = {:home/mojtaba/work/Sharif/ThesisReport/Ms.c-Thesis-Report/figs/1808.01186.pdf:pdf},
title = {{Stimulation and Detection of Android Repackaged Malware with Active Learning}},
year = {2015}
}


@article{Chen_2020,
doi = {10.1109/tifs.2019.2932228},

url = {https://doi.org/10.1109%2Ftifs.2019.2932228},

year = 2020,
publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},

volume = {15},

pages = {987--1001},

author = {Xiao Chen and Chaoran Li and Derui Wang and Sheng Wen and Jun Zhang and Surya Nepal and Yang Xiang and Kui Ren},

title = {Android {HIV}: A Study of Repackaging Malware for Evading Machine-Learning Detection},

journal = {{IEEE} Transactions on Information Forensics and Security}
}



@article{sym14040718,
AUTHOR = {Akbar, Fahad and Hussain, Mehdi and Mumtaz, Rafia and Riaz, Qaiser and Wahab, Ainuddin Wahid Abdul and Jung, Ki-Hyun},
TITLE = {Permissions-Based Detection of Android Malware Using Machine Learning},
JOURNAL = {Symmetry},
VOLUME = {14},
YEAR = {2022},
NUMBER = {4},
ARTICLE-NUMBER = {718},
URL = {https://www.mdpi.com/2073-8994/14/4/718},
ISSN = {2073-8994},
ABSTRACT = {Malware applications (Apps) targeting mobile devices are widespread, and compromise the sensitive and private information stored on the devices. This is due to the asymmetry between informative permissions and irrelevant and redundant permissions for benign Apps. It also depends on the characteristics of the Android platform, such as adopting an open-source policy, supporting unofficial App stores, and the great tolerance for App verification; therefore the Android platform is destined to face such malicious intrusions. In this paper, we propose a permissions-based malware detection system (PerDRaML) that determines the App&rsquo;s maliciousness based on the usage of suspicious permissions. The system uses a multi-level based methodology; we first extract and identify the significant features such as permissions, smali sizes, and permission rates from a manually collected dataset of 10,000 applications. Further, we employ various machine learning models to categorize the Apps into their malicious or benign categories. Through extensive experimentations, the proposed method successfully identifies the 5&times; most significant features to predict malicious Apps. The proposed method outperformed the existing techniques by achieving high accuracies of malware detection i.e., 89.7% with Support Vector Machine, 89.96% with Random Forest, 86.25% with Rotation Forest, and 89.52% with Na&iuml;ve Bayes models. Moreover, the proposed method optimized up to ~77% of the feature set as compared to the recent approaches, while improving the evaluation metrics such as precision, sensitivity, accuracy, and F-measure. The experimental results show that the proposed system provides a high level of symmetry between irrelevant permissions and malware Apps. Further, the proposed system is promising and may provide a low-cost alternative for Android malware detection for malicious or repackaged Apps.},
DOI = {10.3390/sym14040718}
}


@article{inproceedings,
author = {Zhang, Qunfang and Zhang, Xinshuai and Yang, Zhongyun and Qin, Zhongyuan},
year = {2014},
month = {01},
pages = {056 (4 .)-056 (4 .)},
title = {An efficient method of detecting repackaged android applications},
doi = {10.1049/cp.2014.1331}
}

@article{opcode1,
author = {Zhou, Wu and Zhou, Yajin and Jiang, Xuxian and Ning, Peng},
title = {Detecting Repackaged Smartphone Applications in Third-Party Android Marketplaces},
year = {2012},
isbn = {9781450310918},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2133601.2133640},
doi = {10.1145/2133601.2133640},
abstract = {Recent years have witnessed incredible popularity and adoption of smartphones and mobile devices, which is accompanied by large amount and wide variety of feature-rich smartphone applications. These smartphone applications (or apps), typically organized in different application marketplaces, can be conveniently browsed by mobile users and then simply clicked to install on a variety of mobile devices. In practice, besides the official marketplaces from platform vendors (e.g., Google and Apple), a number of third-party alternative marketplaces have also been created to host thousands of apps (e.g., to meet regional or localization needs). To maintain and foster a hygienic smartphone app ecosystem, there is a need for each third-party marketplace to offer quality apps to mobile users.In this paper, we perform a systematic study on six popular Android-based third-party marketplaces. Among them, we find a common "in-the-wild" practice of repackaging legitimate apps (from the official Android Market) and distributing repackaged ones via third-party marketplaces. To better understand the extent of such practice, we implement an app similarity measurement system called DroidMOSS that applies a fuzzy hashing technique to effectively localize and detect the changes from app-repackaging behavior. The experiments with DroidMOSS show a worrisome fact that 5\% to 13\% of apps hosted on these studied marketplaces are repackaged. Further manual investigation indicates that these repackaged apps are mainly used to replace existing in-app advertisements or embed new ones to "steal" or re-route ad revenues. We also identify a few cases with planted backdoors or malicious payloads among repackaged apps. The results call for the need of a rigorous vetting process for better regulation of third-party smartphone application marketplaces.},
booktitle = {Proceedings of the Second ACM Conference on Data and Application Security and Privacy},
pages = {317–326},
numpages = {10},
keywords = {repackaging, privacy and security, smartphones},
location = {San Antonio, Texas, USA},
series = {CODASPY '12}
}


@article{6149548,
author={Desnos, Anthony},
booktitle={2012 45th Hawaii International Conference on System Sciences},
title={Android: Static Analysis Using Similarity Distance},
year={2012},
volume={},
number={},
pages={5394-5403},
doi={10.1109/HICSS.2012.114}}



@article{6333411,
  author={Rad, Babak Bashari and Masrom, Maslin and Ibrahim, Suahimi},
  booktitle={2012 International Conference on E-Learning and E-Technologies in Education (ICEEE)},
  title={Opcodes histogram for classifying metamorphic portable executables malware},
  year={2012},
  volume={},
  number={},
  pages={209-213},
  doi={10.1109/ICeLeTE.2012.6333411}}


	@article{Rad2011,
	abstract = {Metamorphic viruses engage different mutation techniques to escape from string signature based scanning. They try to change their code in new offspring so that the variants appear non-similar and have no common sequences of string as signature. However, all versions of a metamorphic virus have similar task and performance. This obfuscation process helps to keep them safe from the string based signature detection. In this study, we make use of instructions statistical features to compare the similarity of two hosted files probably occupied by two mutated forms of a specific metamorphic virus. The introduced solution in this paper is relied on static analysis and employs the frequency histogram of machine opcodes in different instances of obfuscated viruses. We use Minkowski-form histogram distance measurements in order to check the likeness of portable executables (PE). The purpose of this research is to present an idea that for a number of special obfuscation approaches the presented solution can be used to identify morphed copies of a file. Thus, it can be applied by antivirus scanner to recognize different versions of a metamorphic virus.},
	author = {Rad, Babak Bashari and Masrom, Maslin},
	doi = {10.18517/ijaseit.1.4.82},
	file = {:home/mojtaba/work/papers/1104.3229.pdf:pdf},
	isbn = {9789834236649},
	issn = {2088-5334},
	journal = {International Journal on Advanced Science, Engineering and Information Technology},
	keywords = {metamorphic virus,obfuscation techniques,opcode frequency histogram,virus detection},
	number = {4},
	pages = {403},
	title = {{Metamorphic Virus Detection in Portable Executables Using Opcodes Statistical Feature}},
	volume = {1},
	year = {2011}
	}



	@INPROCEEDINGS{6883436,
  author={Jerome, Quentin and Allix, Kevin and State, Radu and Engel, Thomas},
  booktitle={2014 IEEE International Conference on Communications (ICC)},
  title={Using opcode-sequences to detect malicious Android applications},
  year={2014},
  volume={},
  number={},
  pages={914-919},
  doi={10.1109/ICC.2014.6883436}}


	@article{6566472,
  author={Liangboonprakong, Chatchai and Sornil, Ohm},
  booktitle={2013 IEEE 8th Conference on Industrial Electronics and Applications (ICIEA)},
  title={Classification of malware families based on N-grams sequential pattern features},
  year={2013},
  volume={},
  number={},
  pages={777-782},
  doi={10.1109/ICIEA.2013.6566472}}

	@INPROCEEDINGS{6714172,
  author={Faruki, Parvez and Laxmi, Vijay and Ganmoor, Vijay and Gaur, M.S. and Bharmal, Ammar},
  booktitle={2013 2nd International Conference on Advanced Computing, Networking and Security},
  title={DroidOLytics: Robust Feature Signature for Repackaged Android Apps on Official and Third Party Android Markets},
  year={2013},
  volume={},
  number={},
  pages={247-252},
  doi={10.1109/ADCONS.2013.48}}




	@ARTICLE{8782574,
  author={Chen, Xiao and Li, Chaoran and Wang, Derui and Wen, Sheng and Zhang, Jun and Nepal, Surya and Xiang, Yang and Ren, Kui},
  journal={IEEE Transactions on Information Forensics and Security},
  title={Android HIV: A Study of Repackaging Malware for Evading Machine-Learning Detection},
  year={2020},
  volume={15},
  number={},
  pages={987-1001},
  doi={10.1109/TIFS.2019.2932228}}


	@article{Crussell2013,
	abstract = {The popularity and utility of smartphones rely on their vibrant application markets; however, plagiarism threatens the long-term health of these markets. In this paper, we present a scalable approach to detecting similar Android apps based on semantic information. We implement our approach in a tool called AnDarwin and evaluate it on 265,359 apps collected from 17 markets including Google Play and numerous third-party markets. In contrast with earlier approaches, AnDarwin does not compare apps pairwise, thus greatly increasing its scalability. Additionally, AnDarwin does not rely on information other than the app code — such as the app's market, signature, or description — thus greatly increasing its reliability. AnDarwin can automatically detect library code and remove it from the similarity analysis. We present two use cases for AnDarwin: finding similar apps by different developers (“clones”) and similar apps from the same developer (“rebranded”). In ten hours, AnDarwin detected at least 4,295 apps which have been the victims of cloning and 36,106 apps that are rebranded. By analyzing the clusters found by AnDarwin, we found 88 new variants of malware and identified 169 malicious apps based on differences in the requested permissions. In contrast to earlier approaches, AnDarwin can detect both full and partial app similarity. Additionally, AnDarwin can automatically detect similar code that is injected into many apps, which may indicate the spread of malware. Our evaluation demonstrates AnDarwin's ability to accurately detect similar apps on a large scale.},
	author = {Crussell, Jonathan and Gibler, Clint and Chen, Hao},
	file = {:home/mojtaba/work/papers/978-3-642-40203-6_11.pdf:pdf},
	isbn = {978-3-642-40202-9},
	issn = {03029743},
	journal = {Esorics},
	pages = {182--199},
	title = {{Scalable Semantics-Based Detection of Similar Android Applications}},
	url = {http://www.cs.ucdavis.edu/research/tech-reports/2012/CSE-2013-73.pdf},
	year = {2013}
	}

	@book{Kishore2018,
	abstract = {Android malware is most commonly delivered to a user through the many open app marketplaces. Several recent attacks have shown that the same malware infects different apps in the app market. Automated triaging by computing similarity of apps to known software components can help learn the evolution and propagation of malware. While the emphasis of existing research is on detecting repackaged apps, a similarity analysis system that can identify similar portions of code in dissimilar apps, is important. Only few public tools exist that furnish these details accurately. In this paper, we present a proof-of-concept of an analysis system that compares Android apps using a technique that combines class and method features of an app. We use a two-step process that first compute similar classes and then compute similar methods of those classes. To identify similar classes, we propose a novel set of software birthmarks. We use Normalized Compression Distance to compute similar methods. The birthmarks are evaluated on a set of over 65,000 classes from 60 APKs. To evaluate the performance of our tool, we establish ground truth by manually reverse engineering each app. The proposed system is compared with Google's androsim, the only open-source tool for similarity analysis that also uses NCD. Our approach shows an improvement in accuracy in the worst-case when comapred to androsim. Finally, we furnish a case-study of our system to detect fake and repackaged apps by analyzing 1470 Android apps from various sources.},
	author = {Kishore, Sreesh and Kumar, Renuka and Rajan, Sreeranga},
	booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	doi = {10.1007/978-3-030-05171-6_8},
	file = {:home/mojtaba/work/papers/978-3-030-05171-6_8.pdf:pdf},
	isbn = {9783030051709},
	issn = {16113349},
	keywords = {Androguard,Android,Normalized compression distance,Similarity analysis},
	pages = {146--167},
	publisher = {Springer International Publishing},
	title = {{Towards Accuracy in Similarity Analysis of Android Applications}},
	url = {http://dx.doi.org/10.1007/978-3-030-05171-6_8},
	volume = {11281 LNCS},
	year = {2018}
	}




@article{2513308,
author = {Ko, Jeonguk and Shim, Hyungjoon and Kim, Dongjin and Jeong, Youn-Sik and Cho, Seong-je and Park, Minkyu and Han, Sangchul and Kim, Seong Baeg},
title = {Measuring Similarity of Android Applications via Reversing and K-Gram Birthmarking},
year = {2013},
isbn = {9781450323482},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2513228.2513308},
doi = {10.1145/2513228.2513308},
abstract = {By measuring similarity of programs, we can determine whether someone illegally copies a program from another program or not. If the similarity is significantly high, it means that a program is a copy of the other. This paper proposes three techniques to measure similarity of the Dalvik executable codes (DEXs) in the Android application Packages (APKs). Firstly, we decompile the DEXs of candidate applications into Java sources and compute the similarity between the decompiled sources. Secondly, candidate DEXs are disassembled and the similarities between disassembled codes are measured. Finally, we extract k-gram based software birthmark form the dissembled codes and calculate the similarity of sample DEXs by comparing the extracted birthmarks. We perform several experiments to identify effects of the three techniques. With the analysis of the experimental results, the advantages and disadvantages of each technique are discussed.},
booktitle = {Proceedings of the 2013 Research in Adaptive and Convergent Systems},
pages = {336–341},
numpages = {6},
keywords = {Android application, software similarity, software theft, K-gram, reversing},
location = {Montreal, Quebec, Canada},
series = {RACS '13}
}

@INPROCEEDINGS{6911805,
  author={Hu, Wenjun and Tao, Jing and Ma, Xiaobo and Zhou, Wenyu and Zhao, Shuang and Han, Ting},
  booktitle={2014 23rd International Conference on Computer Communication and Networks (ICCCN)},
  title={MIGDroid: Detecting APP-Repackaging Android malware via method invocation graph},
  year={2014},
  volume={},
  number={},
  pages={1-7},
  doi={10.1109/ICCCN.2014.6911805}}


	@article{Zhou2013,
	abstract = {Mobile applications (or apps) are rapidly growing in number and variety. These apps provide useful features, but also bring certain privacy and security risks. For example, malicious authors may attach destructive payloads to legitimate apps to create so-called "piggybacked" apps and advertise them in various app markets to infect unsuspecting users. To detect them, existing approaches typically employ pair-wise comparison, which unfortunately has limited scalability. In this paper, we present a fast and scalable approach to detect these apps in existing Android markets. Based on the fact that the attached payload is not an integral part of a given app's primary functionality, we propose a module decoupling technique to partition an app's code into primary and non-primary modules. Also, noticing that piggybacked apps share the same primary modules as the original apps, we develop a feature fingerprint technique to extract various semantic features (from primary modules) and convert them into feature vectors. We then construct a metric space and propose a linearithmic search algorithm (with O(n log n) time complexity) to efficiently and scalably detect piggybacked apps. We have implemented a prototype and used it to study 84, 767 apps collected from various Android markets in 2011. Our results show that the processing of these apps takes less than nine hours on a single machine. In addition, among these markets, piggybacked apps range from 0.97% to 2.7% (the official Android Market has 1%). Further investigation shows that they are mainly used to steal ad revenue from the original developers and implant malicious payloads (e.g., for remote bot control). These results demonstrate the effectiveness and scalability of our approach. Copyright 2013 ACM.},
	author = {Zhou, Wu and Zhou, Yajin and Grace, Michael and Jiang, Xuxian and Zou, Shihong},
	doi = {10.1145/2435349.2435377},
	file = {:home/mojtaba/work/papers/codaspy13.pdf:pdf},
	isbn = {9781450318907},
	journal = {CODASPY 2013 - Proceedings of the 3rd ACM Conference on Data and Application Security and Privacy},
	keywords = {App repackaging,Mobile application,Piggybacked application,Smartphone security},
	pages = {185--195},
	title = {{Fast, scalable detection of "piggybacked" mobile applications}},
	year = {2013}
	}


@article{2568286,
author = {Chen, Kai and Liu, Peng and Zhang, Yingjun},
title = {Achieving Accuracy and Scalability Simultaneously in Detecting Application Clones on Android Markets},
year = {2014},
isbn = {9781450327565},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2568225.2568286},
doi = {10.1145/2568225.2568286},
abstract = {Besides traditional problems such as potential bugs, (smartphone) application clones on Android markets bring new threats. That is, attackers clone the code from legitimate Android applications, assemble it with malicious code or advertisements, and publish these ``purpose-added" app clones on the same or other markets for benefits. Three inherent and unique characteristics make app clones difficult to detect by existing techniques: a billion opcode problem caused by cross-market publishing, gap between code clones and app clones, and prevalent Type 2 and Type 3 clones. Existing techniques achieve either accuracy or scalability, but not both. To achieve both goals, we use a geometry characteristic, called centroid, of dependency graphs to measure the similarity between methods (code fragments) in two apps. Then we synthesize the method-level similarities and draw a Y/N conclusion on app (core functionality) cloning. The observed ``centroid effect" and the inherent ``monotonicity" property enable our approach to achieve both high accuracy and scalability. We implemented the app clone detection system and evaluated it on five whole Android markets (including 150,145 apps, 203 million methods and 26 billion opcodes). It takes less than one hour to perform cross-market app clone detection on the five markets after generating centroids only once.},
booktitle = {Proceedings of the 36th International Conference on Software Engineering},
pages = {175–186},
numpages = {12},
keywords = {Software analysis, clone detection, Android, centroid},
location = {Hyderabad, India},
series = {ICSE 2014}
}



@article{Chen2014,
abstract = {Besides traditional problems such as potential bugs, (smartphone) application clones on Android markets bring new threats. That is, attackers clone the code from legitimate Android applications, assemble it with malicious code or advertisements, and publish these ''purpose-added" app clones on the same or other markets for benefits. Three inherent and unique characteristics make app clones difficult to detect by existing techniques: a billion opcode problem caused by cross-market publishing, gap between code clones and app clones, and prevalent Type 2 and Type 3 clones. Existing techniques achieve either accuracy or scalability, but not both. To achieve both goals, we use a geometry characteristic, called centroid, of dependency graphs to measure the similarity between methods (code fragments) in two apps. Then we synthesize the method-level similarities and draw a Y/N conclusion on app (core functionality) cloning. The observed ''centroid effect" and the inherent ''monotonicity" property enable our approach to achieve both high accuracy and scalability. We implemented the app clone detection system and evaluated it on five whole Android markets (including 150,145 apps, 203 million methods and 26 billion opcodes). It takes less than one hour to perform cross-market app clone detection on the five markets after generating centroids only once.},
author = {Chen, Kai and Liu, Peng and Zhang, Yingjun},
doi = {10.1145/2568225.2568286},
file = {:home/mojtaba/work/papers/2568225.2568286.pdf:pdf},
isbn = {9781450327565},
issn = {02705257},
journal = {Proceedings - International Conference on Software Engineering},
keywords = {Android,Software analysis,centroid,clone detection},
number = {1},
pages = {175--186},
title = {{Achieving accuracy and scalability simultaneously in detecting application clones on Android markets}},
year = {2014}
}

@article{7752544,
author={Zheng, Jingqiu and Gong, Keyu and Wang, Songhe and Wang, Yifei and Lei, Min},
booktitle={2016 8th International Conference on Wireless Communications & Signal Processing (WCSP)},
title={Repackaged apps detection based on similarity evaluation},
year={2016},
volume={},
number={},
pages={1-5},
doi={10.1109/WCSP.2016.7752544}}


@INPROCEEDINGS{9701544,
author={Cam, Nguyen Tan and Khoa, Nghi Hoang and An, Thieu Thai and Bach, Nguyen Phan and Pham, Van-Hau},
booktitle={2021 8th NAFOSTED Conference on Information and Computer Science (NICS)},
title={Detect repackaged Android applications by using representative graphs},
year={2021},
volume={},
number={},
pages={102-106},
doi={10.1109/NICS54270.2021.9701544}}



@INPROCEEDINGS{phdwang,
author={Y. Wang},
title={Obfuscation-resilient code detection analyses for android apps,” PhD the-
sis, The Ohio State University},
year={2018},
volume={},
number={},
pages={},
doi={10.1109/NICS54270.2021.9701544}}




@INPROCEEDINGS{msctorki,
author={M. Torki},
title={Detecting repackaged android applications},
year={2018},
volume={},
number={},
pages={},
doi={}}

@article{1170,
author = {Wu, Xueping and Zhang, Dafang and Su, Xin and Li, WenWei},
title = {Detect Repackaged Android Application Based on HTTP Traffic Similarity},
year = {2015},
issue_date = {September 2015},
publisher = {John Wiley &amp; Sons, Inc.},
address = {USA},
volume = {8},
number = {13},
issn = {1939-0114},
url = {https://doi.org/10.1002/sec.1170},
doi = {10.1002/sec.1170},
abstract = {In recent years, more and more malicious authors aim to Android platform because of the rapid growth number of Android Google, Menlo Park, California, USA applications or apps. They embedded malicious code into Android apps to execute their special malicious behaviors, such as sending text messages to premium numbers, stealing privacy information, or even converting the infected phones into bots. We called the app, which has been embedded with malicious code, as embedded repackaged app. This phenomena leads a big security risk to the Android users and how to detect them becomes an urgent problem. Previous research efforts focus on extracting the app's characteristics for comparison from its static program code, which neither can handle the code obfuscation technologies, nor can analyze the app's dynamic behaviors feature. To address these limitations, we propose an approach based on extracting the app's characteristics from the HTTP traffic, which is generated by the app. Moreover, we have implemented a multi-thread comparison algorithm based on the balanced Vantage Point Tree VPT, which can remarkably reduce the experiment time. In this experiment, we successfully detected 266 embedded repackaged apps from 7619 Android apps downloaded from six popular Android markets, and the distribution rate of each market ranges from 2.57\% to 6.07\%. Then based on the analyzing of the HTTP traffic generated by these embedded codes, we found that majority of them are advertisement traffic and malicious traffic. Copyright © 2015 John Wiley &amp; Sons, Ltd.},
journal = {Sec. and Commun. Netw.},
month = {sep},
pages = {2257–2266},
numpages = {10},
keywords = {Android app, similarity, HTTP traffic, embedded repackaged}
}


@article{10.1002/sec.1170,
author = {Wu, Xueping and Zhang, Dafang and Su, Xin and Li, WenWei},
title = {Detect Repackaged Android Application Based on HTTP Traffic Similarity},
year = {2015},
issue_date = {September 2015},
publisher = {John Wiley &amp; Sons, Inc.},
address = {USA},
volume = {8},
number = {13},
issn = {1939-0114},
url = {https://doi.org/10.1002/sec.1170},
doi = {10.1002/sec.1170},
abstract = {In recent years, more and more malicious authors aim to Android platform because of the rapid growth number of Android Google, Menlo Park, California, USA applications or apps. They embedded malicious code into Android apps to execute their special malicious behaviors, such as sending text messages to premium numbers, stealing privacy information, or even converting the infected phones into bots. We called the app, which has been embedded with malicious code, as embedded repackaged app. This phenomena leads a big security risk to the Android users and how to detect them becomes an urgent problem. Previous research efforts focus on extracting the app's characteristics for comparison from its static program code, which neither can handle the code obfuscation technologies, nor can analyze the app's dynamic behaviors feature. To address these limitations, we propose an approach based on extracting the app's characteristics from the HTTP traffic, which is generated by the app. Moreover, we have implemented a multi-thread comparison algorithm based on the balanced Vantage Point Tree VPT, which can remarkably reduce the experiment time. In this experiment, we successfully detected 266 embedded repackaged apps from 7619 Android apps downloaded from six popular Android markets, and the distribution rate of each market ranges from 2.57\% to 6.07\%. Then based on the analyzing of the HTTP traffic generated by these embedded codes, we found that majority of them are advertisement traffic and malicious traffic. Copyright © 2015 John Wiley &amp; Sons, Ltd.},
journal = {Sec. and Commun. Netw.},
month = {sep},
pages = {2257–2266},
numpages = {10},
keywords = {Android app, similarity, HTTP traffic, embedded repackaged}
}

@article{Alshehri2022,
abstract = {The popularity of Android brings much functionality to its users but it also brings many threats. Repacked Android application is one such threat which is the root of many other threats such as malware, phishing, adware, and economical loss. Earlier many techniques have been proposed for the detection of repacked application but they have their limitations and bottlenecks. The issue of malware and duplicate apps affecting the smartphones are being reported on a large scale and has drawn the attention of many researchers. Major of these issues target Android-based phones. Repackaged apps are usually infected versions of popular apps. Adversaries download a popular Android app, and obtain the code using reverse engineering and then add their code (often malicious) to it and repackage and release the app. The existing methods focus primarily on the extraction of apps' behavior and comparing the same with their static code. These have the least chance of detecting the code obfuscation and the dynamic behavior of apps. Therefore, a framework of App-NTS is proposed which extracts the dynamic behavior of the apps from the network traffic analysis. The dynamic vantage point algorithm used for the comparative analysis of the apps' behavior, which significantly helps in reducing the time complexity. Experimental analysis has detected 365 repacked apps from 8645 apps that are downloaded from various online markets and have also brought dramatic results in terms of better performance with Mean Square Error value decreased by 41% and Log loss reduced by 35.2%. There is an increase in accuracy of 18.3% when compared to other states of the art techniques.},
author = {Alshehri, Mohammed},
doi = {10.1007/s12652-021-03023-0},
file = {:home/mojtaba/work/papers/s12652-021-03023-0.pdf:pdf},
isbn = {0123456789},
issn = {18685145},
journal = {Journal of Ambient Intelligence and Humanized Computing},
keywords = {Malware repackaging,Network traffic analysis,Vantage point and time complexity},
number = {3},
pages = {1537--1546},
publisher = {Springer Berlin Heidelberg},
title = {{APP-NTS: a network traffic similarity-based framework for repacked Android apps detection}},
url = {https://doi.org/10.1007/s12652-021-03023-0},
volume = {13},
year = {2022}
}



@Article{He2020,
author={He, Gaofeng
and Xu, Bingfeng
and Zhang, Lu
and Zhu, Haiting},
title={On-Device Detection of Repackaged Android Malware via Traffic Clustering},
journal={Security and Communication Networks},
year={2020},
month={May},
day={31},
publisher={Hindawi},
volume={2020},
pages={8630748},
abstract={Malware has become a significant problem on the Android platform. To defend against Android malware, researchers have proposed several on-device detection methods. Typically, these on-device detection methods are composed of two steps: (i) extracting the apps{\&}{\#}x2019; behavior features from the mobile devices and (ii) sending the extracted features to remote servers (such as a cloud platform) for analysis. By monitoring the behaviors of the apps that are running on mobile devices, available methods can detect suspicious applications (simply, <i>apps</i>) accurately. However, mobile devices are typically resource limited. The feature extraction and massive data transmission might consume substantial power and CPU resources; thus, the performance of mobile devices will be degraded. To address this issue, we propose a novel method for detecting Android malware by clustering apps{\&}{\#}x2019; traffic at the edge computing nodes. First, a new integrated architecture of the cloud, edge, and mobile devices for Android malware detection is presented. Then, for repackaged Android malware, the network traffic content and statistics are extracted at the edge as detection features. Finally, in the cloud, similarities between apps are calculated, and the similarity values are automatically clustered to separate the original apps and the malware. The experimental results demonstrate that the proposed method can detect repackaged Android malware with high precision and with a minimal impact on the performance of mobile devices.},
issn={1939-0114},
doi={10.1155/2020/8630748},
url={https://doi.org/10.1155/2020/8630748}
}











@article{
11060,
author = {Alex Rodriguez  and Alessandro Laio },
title = {Clustering by fast search and find of density peaks},
journal = {Science},
volume = {344},
number = {6191},
pages = {1492-1496},
year = {2014},
doi = {10.1126/science.1242072},
URL = {https://www.science.org/doi/abs/10.1126/science.1242072},
eprint = {https://www.science.org/doi/pdf/10.1126/science.1242072},
abstract = {Cluster analysis is used in many disciplines to group objects according to a defined measure of distance. Numerous algorithms exist, some based on the analysis of the local density of data points, and others on predefined probability distributions. Rodriguez and Laio devised a method in which the cluster centers are recognized as local density maxima that are far away from any points of higher density. The algorithm depends only on the relative densities rather than their absolute values. The authors tested the method on a series of data sets, and its performance compared favorably to that of established techniques. Science, this issue p. 1492 Local density of points is ranked and analyzed to categorize data. Cluster analysis is aimed at classifying elements into categories on the basis of their similarity. Its applications range from astronomy to bioinformatics, bibliometrics, and pattern recognition. We propose an approach based on the idea that cluster centers are characterized by a higher density than their neighbors and by a relatively large distance from points with higher densities. This idea forms the basis of a clustering procedure in which the number of clusters arises intuitively, outliers are automatically spotted and excluded from the analysis, and clusters are recognized regardless of their shape and of the dimensionality of the space in which they are embedded. We demonstrate the power of the algorithm on several test cases.}}



@inproceedings{1145,
author = {Malik, Jyoti and Kaushal, Rishabh},
title = {CREDROID: Android Malware Detection by Network Traffic Analysis},
year = {2016},
isbn = {9781450343466},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2940343.2940348},
doi = {10.1145/2940343.2940348},
abstract = {Android, one of the most popular open source mobile operating system, is facing a lot of security issues. Being used by users with varying degrees of awareness complicates the problem further. Most of the security problems are due to maliciousness of android applications. The malwares get installed in mobile phones through various popular applications particularly gaming applications or some utility applications from various third party app-stores which are untrustworthy. A common feature of the malware is to access the sensitive information from the mobile device and transfer it to remote servers. For our work, we have confined ourselves to defining maliciousness as leakage of privacy information by Android application. In this paper we have proposed a method named as CREDROID which identifies malicious applications on the basis of their Domain Name Server(DNS) queries as well as the data it transmits to remote server by performing the in-depth analysis of network traffic logs in offline mode. Instead of performing signature based detection which is unable to detect polymorphic malwares, we propose a pattern based detection. Pattern in our work refers to the leakage of sensitive information being sent to the remote server. CREDROID is a semi-automated approach which works on various factors like the remote server where the application is connecting, data being sent and the protocol being used for communication for identifying the trustworthiness (credibility) of the application. In our work, we have observed that 63\% of the applications from a standard dataset of malwares are generating network traffic which has been the focus of our work.},
booktitle = {Proceedings of the 1st ACM Workshop on Privacy-Aware Mobile Computing},
pages = {28–36},
numpages = {9},
keywords = {malware detection, network traffic analysis, Android},
location = {Paderborn, Germany},
series = {PAMCO '16}
}



@inproceedings{Iland2011DetectingAM,
title={Detecting Android Malware on Network Level},
author={Daniel Iland and Alexander Pucher},
year={2011}
}




@article{8226303,
author={Kandukuru, Satish and Sharma, R. M.},
booktitle={2017 2nd International Conference for Convergence in Technology (I2CT)},
title={Android malicious application detection using permission vector and network traffic analysis},
year={2017},
volume={},
number={},
pages={1126-1132},
doi={10.1109/I2CT.2017.8226303}}




@article{LIN2013340,
title = {Identifying android malicious repackaged applications by thread-grained system call sequences},
journal = {Computers & Security},
volume = {39},
pages = {340-350},
year = {2013},
issn = {0167-4048},
doi = {https://doi.org/10.1016/j.cose.2013.08.010},
url = {https://www.sciencedirect.com/science/article/pii/S0167404813001272},
author = {Ying-Dar Lin and Yuan-Cheng Lai and Chien-Hung Chen and Hao-Chuan Tsai},
keywords = {Malicious repackaged applications, Dynamic analysis, System call, Android, Longest common substring},
abstract = {Android security has become highly desirable since adversaries can easily repackage malicious codes into various benign applications and spread these malicious repackaged applications (MRAs). Most MRA detection mechanisms on Android focus on detecting a specific family of MRAs or requiring the original benign application to compare with the malicious ones. This work proposes a new mechanism, SCSdroid (System Call Sequence Droid), which adopts the thread-grained system call sequences activated by applications. The concept is that even if MRAs can be camouflaged as benign applications, their malicious behavior would still appear in the system call sequences. SCSdroid extracts the truly malicious common subsequences from the system call sequences of MRAs belonging to the same family. Therefore, these extracted common subsequences can be used to identify any evaluated application without requiring the original benign application. Experimental results show that SCSdroid falsely detected only two applications among 100 evaluated benign applications, and falsely detected only one application among 49 evaluated malicious applications. As a result, SCSdroid achieved up to 95.97% detection accuracy, i.e., 143 correct detections among 149 applications.}
}


@article{1156,
author = {Costamagna, Valerio and Zheng, Cong and Huang, Heqing},
title = {Identifying and Evading Android Sandbox Through Usage-Profile Based Fingerprints},
year = {2018},
isbn = {9781450357579},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3203422.3203427},
doi = {10.1145/3203422.3203427},
abstract = {Android sandbox is built either on the Android emulator or the real device with a hooking framework. Fingerprints of the Android sandbox could be used to evade the dynamic detection. So, in this paper, we first conduct a measurement on eight Android sandboxes and find that their customized usage profile (e.g., contact, SMS) can be fingerprinted by attackers for evading the sandbox. From our measurement results, most Android sandboxes have empty usage profile fingerprints, or fixed fingerprints, or random artifact fingerprints. So, without protections on such user profiles, Android malware can identify these fingerprints that associate with different sandboxes and hide its malicious behaviors. At last, we propose several mitigation solutions trivial to implement, including generating and feeding random real usage profiles to the malware sample every time, as well as a hybrid approach, which combines both random and fixed usage profiles.},
booktitle = {Proceedings of the First Workshop on Radical and Experiential Security},
pages = {17–23},
numpages = {7},
keywords = {android, antivirus, sandbox, fingerprinting, mobile security},
location = {Incheon, Republic of Korea},
series = {RESEC '18}
}



@INPROCEEDINGS{1136 ,
author={Yingjun Zhang and Kezhen Huang and Yuling Liu and Kai Chen and Liang Huang and Yifeng Lian},
title={Timing-Based Clone Detection on Android Markets},
proceedings={International Conference on Security and Privacy in Communication Networks. 10th International ICST Conference, SecureComm 2014, Beijing, China, September 24-26, 2014, Revised Selected Papers, Part II},
proceedings_a={SECURECOMM},
year={2015},
month={12},
keywords={Clone detection CPU time usage Smartphone security},
doi={10.1007/978-3-319-23802-9_29}
}



@article{nguyen2020detecting,
title={Detecting repackaged android applications using perceptual hashing},
author={Nguyen, Thanh and McDonald, J Todd and Glisson, William Bradley and Andel, Todd R},
year={2020},
organization={Proceedings of the 53rd Hawaii International Conference on System Sciences}
}


@INPROCEEDINGS{7181443,
author={Soh, Charlie and Kuan Tan, Hee Beng and Arnatovich, Yauhen Leanidavich and Wang, Lipo},
booktitle={2015 IEEE 23rd International Conference on Program Comprehension},
title={Detecting Clones in Android Applications through Analyzing User Interfaces},
year={2015},
volume={},
number={},
pages={163-173},
doi={10.1109/ICPC.2015.25}}



@INPROCEEDINGS{5665792,
author={Bläsing, Thomas and Batyuk, Leonid and Schmidt, Aubrey-Derrick and Camtepe, Seyit Ahmet and Albayrak, Sahin},
booktitle={2010 5th International Conference on Malicious and Unwanted Software},
title={An Android Application Sandbox system for suspicious software detection},
year={2010},
volume={},
number={},
pages={55-62},
doi={10.1109/MALWARE.2010.5665792}}


@Article{Kim2016,
author={Kim, Daeyoung
and Gokhale, Amruta
and Ganapathy, Vinod
and Srivastava, Abhinav},
title={Detecting plagiarized mobile apps using API birthmarks},
journal={Automated Software Engineering},
year={2016},
month={Dec},
day={01},
volume={23},
number={4},
pages={591-618},
abstract={This paper addresses the problem of detecting plagiarized mobile apps. Plagiarism is the practice of building mobile apps by reusing code from other apps without the consent of the corresponding app developers. Recent studies on third-party app markets have suggested that plagiarized apps are an important vehicle for malware delivery on mobile phones. Malware authors repackage official versions of apps with malicious functionality, and distribute them for free via these third-party app markets. An effective technique to detect app plagiarism can therefore help identify malicious apps. Code plagiarism has long been a problem and a number of code similarity detectors have been developed over the years to detect plagiarism. In this paper we show that obfuscation techniques can be used to easily defeat similarity detectors that rely solely on statically scanning the code of an app. We propose a dynamic technique to detect plagiarized apps that works by observing the interaction of an app with the underlying mobile platform via its API invocations. We propose API birthmarks to characterize unique app behaviors, and develop a robust plagiarism detection tool using API birthmarks.},
issn={1573-7535},
doi={10.1007/s10515-015-0182-6},
url={https://doi.org/10.1007/s10515-015-0182-6}
}





@InProceedings{6545,
author="Guan, Quanlong
and Huang, Heqing
and Luo, Weiqi
and Zhu, Sencun",
editor="Caballero, Juan
and Bodden, Eric
and Athanasopoulos, Elias",
title="Semantics-Based Repackaging Detection for Mobile Apps",
booktitle="Engineering Secure Software and Systems",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="89--105",
abstract="While Android app stores keep growing in size and in number, app repackaging has become a major threat to the health of the mobile ecosystem. Different from many syntax-based repackaging detection techniques, in this work we propose a semantic-based approach, RepDetector, which is more robust against code obfuscation attacks. To capture an app's semantics, our approach extracts input-output states of core functions in the app and then compare function and app similarity. We implement a prototype of RepDetector, and evaluate it against various obfuscation technologies. The results show that our approach can detect repackaged apps effectively. It is also at least a hundred times faster than Androguard.",
isbn="978-3-319-30806-7"
}


@INPROCEEDINGS{7961511,
author={Yue, Shengtao and Feng, Weizan and Ma, Jun and Jiang, Yanyan and Tao, Xianping and Xu, Chang and Lu, Jian},
booktitle={2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC)},
title={RepDroid: An Automated Tool for Android Application Repackaging Detection},
year={2017},
volume={},
number={},
pages={132-142},
doi={10.1109/ICPC.2017.16}}



@inproceedings{6754,
author = {Shao, Yuru and Luo, Xiapu and Qian, Chenxiong and Zhu, Pengfei and Zhang, Lei},
title = {Towards a Scalable Resource-Driven Approach for Detecting Repackaged Android Applications},
year = {2014},
isbn = {9781450330053},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2664243.2664275},
doi = {10.1145/2664243.2664275},
abstract = {Repackaged Android applications (or simply apps) are one of the major sources of mobile malware and also an important cause of severe revenue loss to app developers. Although a number of solutions have been proposed to detect repackaged apps, the majority of them heavily rely on code analysis, thus suffering from two limitations: (1) poor scalability due to the billion opcode problem; (2) unreliability to code obfuscation/app hardening techniques. In this paper, we explore an alternative approach that exploits core resources, which have close relationships with codes, to detect repackaged apps. More precisely, we define new features for characterizing apps, investigate two kinds of algorithms for searching similar apps, and propose a two-stage methodology to speed up the detection. We realize our approach in a system named ResDroid and conduct large scale evaluation on it. The results show that ResDroid can identify repackaged apps efficiently and effectively even if they are protected by obfuscation or hardening systems.},
booktitle = {Proceedings of the 30th Annual Computer Security Applications Conference},
pages = {56–65},
numpages = {10},
location = {New Orleans, Louisiana, USA},
series = {ACSAC '14}
}



@INPROCEEDINGS{8116343,
author={Lin, Meiqi and Zhang, Dafang and Su, Xin and Yu, Tinghao},
booktitle={2017 IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS)},
title={Effective and scalable repackaged application detection based on user interface},
year={2017},
volume={},
number={},
pages={1-6},
doi={10.1109/INFCOMW.2017.8116343}}


@INPROCEEDINGS{8530040,
author={Yue, Shengtao and Sun, Qingwei and Ma, Jun and Tao, Xianping and Xu, Chang and Lu, Jian},
booktitle={2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
title={RegionDroid: A Tool for Detecting Android Application Repackaging Based on Runtime UI Region Features},
year={2018},
volume={},
number={},
pages={323-333},
doi={10.1109/ICSME.2018.00041}}



@ARTICLE{9069227,
author={Hu, Yangyu and Xu, Guosheng and Zhang, Bowen and Lai, Kun and Xu, Guoai and Zhang, Miao},
journal={IEEE Access},
title={Robust App Clone Detection Based on Similarity of UI Structure},
year={2020},
volume={8},
number={},
pages={77142-77155},
doi={10.1109/ACCESS.2020.2988400}}



@inproceedings{Li2012JuxtappAD,
title={Juxtapp and DStruct: Detection of Similarity Among Android Applications},
author={Saung Li},
year={2012}
}
@InProceedings{76544,
author="Guo, Junxia
and Liu, Dongdong
and Zhao, Rilian
and Li, Zheng",
editor="Wang, Guojun
and Lin, Xuemin
and Hendler, James
and Song, Wei
and Xu, Zhuoming
and Liu, Genggeng",
title="WLTDroid: Repackaging Detection Approach for Android Applications",
booktitle="Web Information Systems and Applications",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="579--591",
abstract="Huge number of mobile applications are downloaded every year. These benefits promote the rapid development of the mobile application industry, especially Android applications for its openness. But, because of the low cost and good profit, Android application repackaging also developed quickly, which can make a kind of malware applications and publish them to the Android market. Therefore, in order to defend against this dangerous technology, repackaging detection technology has been continuously studied in recent years. Contrary to the repackaging detection technique, obfuscation techniques are used in the application repacking to avoid detection. This makes the effectiveness of many existing methods be affected. In this paper, we propose a novel approach based on Dynamic Whole Layout Tree extraction, that we call WLTDroid, which can avoid the interference of the layout file obfuscation. The experimental results show that the approach proposed in this paper can resist the obfuscation affect better than other repackaging detection methods. In addition, our approach is more accurate than the existing method RepDroid.",
isbn="978-3-030-60029-7"
}



@INPROCEEDINGS{7846987,
author={Lyu, Fang and Lin, Yapin and Yang, Junfeng and Zhou, Junhai},
booktitle={2016 IEEE Trustcom/BigDataSE/ISPA},
title={SUIDroid: An Efficient Hardening-Resilient Approach to Android App Clone Detection},
year={2016},
volume={},
number={},
pages={511-518},
doi={10.1109/TrustCom.2016.0104}}




@INPROCEEDINGS{9688672,
author={Liu, Xujian and Yu, Zihan and Song, Zhiyong and Chen, Liquan and Qin, Zhongyuan},
booktitle={2021 IEEE 6th International Conference on Signal and Image Processing (ICSIP)},
title={MDSDroid: A Multi-level Detection System for Android Repackaged Applications},
year={2021},
volume={},
number={},
pages={1128-1133},
doi={10.1109/ICSIP52628.2021.9688672}}







@Article{Ma2022,
author={Ma, Jun
and Sun, Qing-Wei
and Xu, Chang
and Tao, Xian-Ping},
title={GridDroid---An Effective and Efficient Approach for Android Repackaging Detection Based on Runtime Graphical User Interface},
journal={Journal of Computer Science and Technology},
year={2022},
month={Feb},
day={01},
volume={37},
number={1},
pages={147-181},
abstract={Repackaging brings serious threats to Android ecosystem. Software birthmark techniques are typically applied to detect repackaged apps. Birthmarks based on apps' runtime graphical user interfaces (GUI) are effective, especially for obfuscated or encrypted apps. However, existing studies are time-consuming and not suitable for handling apps in large scale. In this paper, we propose an effective yet efficient dynamic GUI birthmark for Android apps. Briefly, we run an app with automatically generated GUI events and dump its layout after each event. We divide each dumped layout into a grid, count in each grid cell the vertices of boundary rectangles corresponding to widgets within the layout, and generate a feature vector to encode the layout. Similar layouts are merged at runtime, and finally we obtain a graph as the birthmark of the app. Given a pair of apps to be compared, we build a weighted bipartite graph from their birthmarks and apply a modified version of the maximum-weight-bipartite-matching algorithm to determine whether they form a repackaging pair (RP) or not. We implement the proposed technique in a prototype, GridDroid, and apply it to detect RPs in three datasets involving 527 apks. GridDroid reports only six false negatives and seven false positives, and it takes GridDroid merely 20 microseconds on average to compare a pair of birthmarks.},
issn={1860-4749},
doi={10.1007/s11390-021-1659-3},
url={https://doi.org/10.1007/s11390-021-1659-3}
}
